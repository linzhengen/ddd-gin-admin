// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/linzhengen/ddd-gin-admin/app/application"
	"github.com/linzhengen/ddd-gin-admin/app/domain/service"
	"github.com/linzhengen/ddd-gin-admin/app/infrastructure/casbin"
	"github.com/linzhengen/ddd-gin-admin/app/infrastructure/persistence"
	"github.com/linzhengen/ddd-gin-admin/app/interfaces/api/handler"
	"github.com/linzhengen/ddd-gin-admin/app/interfaces/api/router"
	"github.com/linzhengen/ddd-gin-admin/injector/api"
)

import (
	_ "github.com/linzhengen/ddd-gin-admin/app/interfaces/api/swagger"
)

// Injectors from wire.go:

func BuildApiInjector() (*ApiInjector, func(), error) {
	author, cleanup, err := api.InitAuth()
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := api.InitGormDB()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	roleRepository := persistence.NewRole(db)
	roleMenuRepository := persistence.NewRoleMenu(db)
	menuActionResourceRepository := persistence.NewMenuActionResource(db)
	userRepository := persistence.NewUser(db)
	userRoleRepository := persistence.NewUserRole(db)
	casbinAdapter := casbin.NewCasbinAdapter(roleRepository, roleMenuRepository, menuActionResourceRepository, userRepository, userRoleRepository)
	syncedEnforcer, cleanup3, err := api.InitCasbin(casbinAdapter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	menuRepository := persistence.NewMenu(db)
	menuActionRepository := persistence.NewMenuAction(db)
	login := service.NewLogin(author, userRepository, userRoleRepository, roleRepository, roleMenuRepository, menuRepository, menuActionRepository)
	applicationLogin := application.NewLogin(login)
	handlerLogin := handler.NewLogin(applicationLogin)
	transRepository := persistence.NewTrans(db)
	menu := service.NewMenu(transRepository, menuRepository, menuActionRepository, menuActionResourceRepository)
	applicationMenu := application.NewMenu(menu)
	handlerMenu := handler.NewMenu(applicationMenu)
	role := service.NewRole(casbinAdapter, syncedEnforcer, transRepository, roleRepository, roleMenuRepository, userRepository)
	applicationRole := application.NewRole(role)
	handlerRole := handler.NewRole(applicationRole)
	user := service.NewUser(casbinAdapter, syncedEnforcer, transRepository, userRepository, userRoleRepository, roleRepository)
	applicationUser := application.NewUser(user)
	handlerUser := handler.NewUser(applicationUser)
	healthCheck := handler.NewHealthCheck()
	routerRouter := router.NewRouter(author, syncedEnforcer, handlerLogin, handlerMenu, handlerRole, handlerUser, healthCheck)
	engine := api.InitGinEngine(routerRouter)
	apiInjector := NewApiInjector(engine, author, syncedEnforcer, menu)
	return apiInjector, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
